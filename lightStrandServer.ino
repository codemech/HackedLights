#include <IRremote.h>
#include <Ethernet.h>
#include <avr/pgmspace.h>
#include <SPI.h> 

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 1, 105);
EthernetServer server(5555);
EthernetClient client;
char packetBuffer[UDP_TX_PACKET_MAX_SIZE];
     
IRsend irsend;
const prog_uint16_t power_off[] PROGMEM            = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 39996, 8967, 2261, 552 };                                         
const prog_uint16_t power_on[]  PROGMEM            = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 39996, 8967, 2261, 552 };                            
const prog_uint16_t brightness_up[] PROGMEM        = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 39996, 8967, 2261, 552 };
const prog_uint16_t brightness_down[] PROGMEM      = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 39996, 8967, 2261, 552 };
const prog_uint16_t flash[] PROGMEM                = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 39996, 8967, 2261, 552, };
const prog_uint16_t strobe[] PROGMEM               = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 40022, 8967, 2261, 552 };
const prog_uint16_t fade[] PROGMEM                 = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 40022, 8967, 2261, 552 };
const prog_uint16_t smooth[] PROGMEM               = { 8967, 4523, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 39996, 8967, 2261, 552 };
const prog_uint16_t color_white[] PROGMEM          = { 8967, 4523, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 40022, 8967, 2261, 552 };
const prog_uint16_t color_red[] PROGMEM            = { 8967, 4523, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 40022, 8967, 2261, 552 };
const prog_uint16_t color_red_orange[] PROGMEM     = { 8967, 4523, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 40022, 8967, 2261, 552 };
const prog_uint16_t color_orange[] PROGMEM         = { 8993, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 40101, 8993, 2261, 552 };
const prog_uint16_t color_orange_yellow[] PROGMEM  = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 552, 552, 1683,	552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 39996, 8967, 2261, 552 };
const prog_uint16_t color_yellow[] PROGMEM         = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 40022, 8967, 2261, 552} ;
const prog_uint16_t color_green[] PROGMEM          = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 39996, 8967, 2261, 552 };
const prog_uint16_t color_light_green[] PROGMEM    = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 39996, 8967, 2261, 552 };
const prog_uint16_t color_green_blue[] PROGMEM     = { 8967, 4523, 552, 552, 552, 552, 552, 552 ,552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552,	552, 552, 552, 1683, 552, 1683,	552, 552, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 1683,	552, 552, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 1683,	552, 39996, 8967, 2261, 552 };
const prog_uint16_t color_light_blue[] PROGMEM     = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 40022, 8967, 2261, 552 };
const prog_uint16_t color_medium_blue[] PROGMEM    = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 39996, 8967, 2261, 552 };
const prog_uint16_t color_blue[] PROGMEM           = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 40022, 8967, 2261, 552 };
const prog_uint16_t color_dark_blue[] PROGMEM      = { 8967, 4523, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 40022, 8967, 2261, 552 };
const prog_uint16_t color_dark_purple[] PROGMEM    = { 8967, 4523, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 40022, 8967, 2261, 552 };
const prog_uint16_t color_medium_purple[] PROGMEM  = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 39996, 8967, 2261, 552 };
const prog_uint16_t color_light_purple[] PROGMEM   = { 8967, 4497, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1683, 552, 1683, 552, 1683, 552, 1683, 552, 40022, 8967, 2261, 552 };

void setup(void)
{
  Ethernet.begin(mac,ip);
  server.begin();
  SendIRCommand( 0 );
}

void loop(void){
  EthernetClient client = server.available();
  if (client.available()) {
    uint8_t code = client.read();
    SendIRCommand( code ); 
  }
}

void SendIRCommand(uint8_t code)
{
  const prog_uint16_t* cmd_array_ptr;
  switch(code)
  {
  case 0:
   cmd_array_ptr = power_off;
   break;
  case 1:
   cmd_array_ptr = power_on;
   break;
  case 2:
   cmd_array_ptr = brightness_up;
   break;
  case 3:
   cmd_array_ptr = brightness_down;
   break;
  case 4:
   cmd_array_ptr = flash;
   break;
  case 5:
   cmd_array_ptr = strobe;
   break;
  case 6:
   cmd_array_ptr = fade;
   break;
  case 7:
   cmd_array_ptr = smooth;
   break;
  case 8:
   cmd_array_ptr =  color_white;
   break;
  case 9:
   cmd_array_ptr = color_red;
   break;
  case 10:
   cmd_array_ptr = color_red_orange;
   break;
  case 11:
   cmd_array_ptr = color_orange;
   break;
  case 12:
   cmd_array_ptr = color_orange_yellow;
   break;
  case 13:
   cmd_array_ptr = color_yellow;
   break;
  case 14:
   cmd_array_ptr = color_green;
   break;
  case 15:
   cmd_array_ptr = color_light_green;
   break;
  case 16:
   cmd_array_ptr =  color_green_blue;
   break;
  case 17:
   cmd_array_ptr = color_light_blue;
   break;
  case 18:
   cmd_array_ptr = color_medium_blue;
   break;
  case 19:
   cmd_array_ptr = color_blue;
   break;
  case 20:
   cmd_array_ptr = color_dark_blue;
   break;
  case 21:
   cmd_array_ptr = color_dark_purple;
   break;
  case 22:
   cmd_array_ptr = color_medium_purple;
   break;
  case 23:
   cmd_array_ptr = color_light_purple;
   break;   
  }
   
  unsigned int tx_array[71];
  for(int i = 0; i < 71; i ++)
  {
   tx_array[i] =  pgm_read_word_near( cmd_array_ptr + i);
  }
  for (int i = 0; i < 3; i++) 
  {
   irsend.sendRaw(tx_array, 71, 38);
   delay(100);
  }     
}
